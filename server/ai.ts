import { GoogleGenerativeAI } from "@google/genai";

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY || "");

class AIService {
  private model = "gemini-1.5-flash";

  async generateResponse(prompt: string, context?: string): Promise<string> {
    try {
      const systemPrompt = `Sen NexaBot adÄ±nda eÄŸlenceli ve yardÄ±mcÄ± bir sohbet botusun. TÃ¼rkÃ§e konuÅŸuyorsun ve samimi bir tonda cevap veriyorsun. KÄ±sa ve anlaÅŸÄ±lÄ±r cevaplar ver. Maksimum 200 karakter kullan. KullanÄ±cÄ±lara her zaman ismiyle hitap et.${context ? ` Ä°ÅŸte sohbet baÄŸlamÄ±: ${context}` : ''}`;

      const model = genAI.getGenerativeModel({ model: this.model });
      const result = await model.generateContent(`${systemPrompt}\n\nSoru: ${prompt}`);
      const response = await result.response;

      return response.text() || "ÃœzgÃ¼nÃ¼m, ÅŸu anda cevap veremiyorum.";
    } catch (error) {
      console.error("AI Response Error:", error);
      console.error("Error details:", JSON.stringify(error, null, 2));
      return `ğŸ’¬ AI servisi hatasÄ±: ${JSON.stringify(error, null, 2)}`;
    }
  }

  async translateText(text: string, targetLang: string = "tr"): Promise<string> {
    try {
      const prompt = `Bu metni ${targetLang === "tr" ? "TÃ¼rkÃ§e" : "Ä°ngilizce"}'ye Ã§evir: "${text}"`;
      
      const model = genAI.getGenerativeModel({ model: this.model });
      const result = await model.generateContent(prompt);
      const response = await result.response;

      return response.text() || "Ã‡eviri yapÄ±lamadÄ±.";
    } catch (error) {
      console.error("Translation Error:", error);
      return "Ã‡eviri servisinde hata oluÅŸtu.";
    }
  }

  async explainTopic(topic: string): Promise<string> {
    try {
      const prompt = `"${topic}" konusunu basit ve anlaÅŸÄ±lÄ±r ÅŸekilde 150 kelimeyle aÃ§Ä±kla.`;
      
      const model = genAI.getGenerativeModel({ model: this.model });
      const result = await model.generateContent(prompt);
      const response = await result.response;

      return response.text() || "Bu konu hakkÄ±nda bilgi bulunamadÄ±.";
    } catch (error) {
      console.error("Explanation Error:", error);
      return "AÃ§Ä±klama servisinde hata oluÅŸtu.";
    }
  }

  async generateCreativeContent(type: string, prompt: string): Promise<string> {
    try {
      let systemPrompt = "";
      
      switch (type) {
        case "ÅŸiir":
          systemPrompt = "Verilen konuda kÄ±sa ve gÃ¼zel bir ÅŸiir yaz.";
          break;
        case "hikaye":
          systemPrompt = "Verilen konuda kÄ±sa bir hikaye yaz (maksimum 100 kelime).";
          break;
        case "ÅŸarkÄ±":
          systemPrompt = "Verilen konuda kÄ±sa bir ÅŸarkÄ± sÃ¶zÃ¼ yaz.";
          break;
        default:
          systemPrompt = "Verilen konuda yaratÄ±cÄ± bir metin oluÅŸtur.";
      }

      const model = genAI.getGenerativeModel({ model: this.model });
      const result = await model.generateContent(`${systemPrompt}\n\n${prompt}`);
      const response = await result.response;

      return response.text() || "YaratÄ±cÄ± iÃ§erik oluÅŸturulamadÄ±.";
    } catch (error) {
      console.error("Creative Content Error:", error);
      return "Ä°Ã§erik Ã¼retiminde hata oluÅŸtu.";
    }
  }
}

export const aiService = new AIService();